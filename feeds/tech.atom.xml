<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>D3C blog - TECH</title><link href="https://crothel.github.io/blog/" rel="alternate"></link><link href="https://crothel.github.io/blog/feeds/tech.atom.xml" rel="self"></link><id>https://crothel.github.io/blog/</id><updated>2018-08-26T19:30:00+09:00</updated><entry><title>GithubPages + Pelicanでブログ構築</title><link href="https://crothel.github.io/blog/20180826.html" rel="alternate"></link><published>2018-08-26T19:30:00+09:00</published><updated>2018-08-26T19:30:00+09:00</updated><author><name>Mt Taka</name></author><id>tag:crothel.github.io,2018-08-26:/blog/20180826.html</id><summary type="html">&lt;p&gt;GithubPages + Pelicanによるブログの構築について。&lt;/p&gt;</summary><content type="html">&lt;h3&gt;1.はじめに&lt;/h3&gt;
&lt;p&gt;学習の効率を上げるためにアウトプットの割合を増やす必要があると思い立ち、ブログに学習記録を書いたり、取り組みを整理したりすることにした。&lt;/p&gt;
&lt;p&gt;WordPressなどのCMSで簡単にはじめても良かったのだが、ブログという点でも新しい取り組みをしようということで、Markdownで記事を書き、Pythonで静的ファイルを生成し、Githubで管理することにした。&lt;/p&gt;
&lt;h3&gt;2.候補&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://h-miyako.hatenablog.com/entry/2016/02/15/154712"&gt;Python製の静的サイトジェネレータを色々試してみました - Blank File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slideship.com/users/@driller/presentations/2017/09/N6Jbt8C28qNE4yYP8hDaPh/"&gt;静的サイトジェネレータのすゝめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記サイトで紹介されている静的サイトジェネレータから、結局Pelicanを選択した。&lt;/p&gt;
&lt;p&gt;利用者が多くテーマが豊富という点が決め手。Jinja2やCSSをいじってデザインを作り込む気はなく、ひとまずコンテンツの作成に集中したかった。&lt;/p&gt;
&lt;h3&gt;3.構築&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.compnet.jp/posts/2016-10-04T1648_switch-to-pelican.html"&gt;Blog システムを Pelican に移行する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/yusukew62/items/7b01d2370cdbe170b28d"&gt;Python製静的HTMLジェネレータのPelicanでGitHub Pagesを公開する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3-1.Github Pagesの準備&lt;/h4&gt;
&lt;p&gt;Github Pagesにはユーザーページとプロジェクトページの二種類がある。ユーザーページはユーザーごとに1つしか作れないが、プロジェクトページはレポジトリごとに作成することができる。&lt;/p&gt;
&lt;p&gt;特に機能の差はないようだが、静的ファイルを管理するブランチが異なる。ユーザーページの場合はmasterブランチで管理するが、プロジェクトページの場合はgh-pagesと名付けたブランチで管理するのがデフォルトのようだ。&lt;/p&gt;
&lt;p&gt;後述のghp-importを使うとgh-pagesというブランチに静的ファイルをまとめることになる。リモートとブランチ名を変えるのはミスの元になりそうで好ましくないので、プロジェクトページを作成することにした。&lt;/p&gt;
&lt;p&gt;レポジトリを新規作成し、gh-pagesというブランチも作成。ローカルの作業フォルダでgit cloneを行った。基本的にはmasterブランチで作業し、そのままソースコードも管理する。&lt;/p&gt;
&lt;h4&gt;3-2.Pelicanの準備とテーマ設定&lt;/h4&gt;
&lt;p&gt;上記サイトの解説を参照。&lt;/p&gt;
&lt;p&gt;テーマはpelican-boostrap3を採用した。Boostwatchを利用でき、カラーリングに幅があることが決め手となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bootswatch.com/"&gt;Boostwatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;テーマの編集&lt;/h5&gt;
&lt;p&gt;デザインをいじりたい場合、編集対象は以下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publishconf.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;themeの各種htmlファイル&lt;/li&gt;
&lt;li&gt;themeの各種CSSファイル&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pelicanの機能として編集すべきものと、themeのデザインによって編集すべきものがあり、pelicanのドキュメントやthemeの中身を覗くことになる。&lt;/p&gt;
&lt;p&gt;汎用性がありそうなものをメモしておく。&lt;/p&gt;
&lt;h5&gt;・dateformat&lt;/h5&gt;
&lt;p&gt;デフォルトの日付は「土 25 8月 2018」というようにイギリス式で表示されるようだ。&lt;/p&gt;
&lt;p&gt;このブログではthemeのHTMLでフォーマットを直接編集してしまったが、pelicanconf.pyに次のような１行を追加すれば済んだかもしれない（未実験）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEFAULT_DATE_FORMAT = &amp;#39;%Y/%m/%d(%a)&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;・addthis&lt;/h5&gt;
&lt;p&gt;pelican-bootstrap3では、ソーシャルボタンを各記事に追加できるが、addthisという外部サービスの利用が必要。&lt;/p&gt;
&lt;p&gt;themeのデフォルトでは、Twitterでのシェア、Facebookのいいね、Googleの+1ボタンのみ。ボタンのサイズがどうもイマイチ。&lt;/p&gt;
&lt;p&gt;addthisは便利そうだったので登録。addthisが生成したコードをそのままHTMLに貼り付けることにした。&lt;/p&gt;
&lt;h5&gt;・googleanalytics&lt;/h5&gt;
&lt;p&gt;Google AnalyticsでトラッキングIDを新規作成。&lt;/p&gt;
&lt;p&gt;publishconf.pyに次の１行を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GOOGLE_ANALYTICS = &amp;quot;作成したトラッキングID&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;リアルタイムの概要から、自分がアクセスすることで動作確認ができる。&lt;/p&gt;
&lt;h4&gt;3-3.Markdown Extention&lt;/h4&gt;
&lt;p&gt;MarkdownのExtentionを追加する場合、pelicanconf.pyの中で、例えば次のように記載する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MARKDOWN = {
    &amp;#39;extension_configs&amp;#39; : {
        &amp;#39;markdown.extensions.codehilite&amp;#39; : {&amp;#39;css_class&amp;#39;: &amp;#39;highlight&amp;#39;},
        &amp;#39;markdown.extensions.tables&amp;#39; : {},
        &amp;#39;markdown.extensions.fenced_code&amp;#39; : {},
        &amp;#39;linkify&amp;#39;: {},
        &amp;#39;del_ins&amp;#39;: {},
        &amp;#39;nl2br&amp;#39;: {}
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;古いweb記事だと以下のような記載が見受けられるが、現在は推奨されていない方法のようだ。WARNINGで注意される。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MD_EXTENSIONS = [&amp;#39;codehilite(css_class=highlight)&amp;#39;, &amp;#39;extra&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.muquu.net/2017/11/06/markdown-extensions/"&gt;Pelican の Markdown extension について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4.記事の書き方（Markdown）&lt;/h3&gt;
&lt;p&gt;この記事のメタは以下のとおり。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GithubPages&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Pelicanでブログ構築&lt;/span&gt;  
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;  
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20180826&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GithubPages&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Pelicanによるブログの構築について&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mdファイルの場合、最初の行で必ずTitleを設定しなければならないようだ。titleが見つからないと怒られる。&lt;/p&gt;
&lt;p&gt;上記に続いて、記事本文を記入していく。&lt;/p&gt;
&lt;h3&gt;5.投稿・更新&lt;/h3&gt;
&lt;p&gt;HTMLファイルを作成し、localhostの8000番ポートで作成したWebページを確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
make serve 
#make serve PORT=8000というようにポートを指定することも可能
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
公開用ファイルを作成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make publish
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;outputフォルダの中身をgh-pagesブランチにまとめる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;git pushでリモートのgh-pagesを更新する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#このブログの場合
git push https://github.com/crothel/blog.git gh-pages:gh-pages  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このブログではmdファイルやソースコードをmasterブランチで管理しているので、masterも更新している。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#このブログの場合
git push https://github.com/crothel/blog.git master:master  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;6.おわりに&lt;/h3&gt;
&lt;p&gt;デザインを１から作るのは大変かもしれないが、themeを編集するのであれば、少しのHTMLの知識があれば、jinja2もなんとなく読める。&lt;/p&gt;
&lt;p&gt;ひとまず満足のいくものができたので、コンテンツの作成に集中できるだろう。しばらくしたら広告やjupyter notebookなども追加してみたい。&lt;/p&gt;</content><category term="python"></category><category term="github pages"></category><category term="pelican"></category></entry></feed>